#!/usr/bin/env python

# stdlib imports
import sys
import os.path
import re
import argparse
import subprocess
import glob

# third party imports
import pandas as pd
import openpyxl
from impactutils.io.container import HDFContainer
from impactutils.io.cmd import get_command_output


def load_container_from_excel(excelfile, outfile):
    container = HDFContainer.create(outfile)
    wb = openpyxl.load_workbook(excelfile)
    sheets = wb.sheetnames
    wb.close()
    for sheet in sheets:
        df = pd.read_excel(excelfile, sheet_name=sheet)
        container.setDataFrame(sheet, df)

    container.close()


def main(args):
    homedir = os.path.dirname(os.path.abspath(__file__))  # where is this script?
    excelfiles = glob.glob(
        os.path.join(homedir, "..", "losspager", "data", "semi_*.xlsx")
    )
    hdffiles = glob.glob(os.path.join(homedir, "..", "losspager", "data", "semi_*.hdf"))
    if args.undo:
        cmd = f"git checkout {' '.join(hdffiles)}"
        res, stdout, stderr = get_command_output(cmd)
        if not res:
            print(f'Checkout failed with errors: "{stderr}" "{stdout}"')
            sys.exit(1)
        else:
            print("HDF files have been reverted back to their previous state.")
        sys.exit(0)

    if args.convert:
        for excelfile in excelfiles:
            fpath, fname = os.path.split(excelfile)
            fbase, _ = os.path.splitext(fname)
            outfile = os.path.join(fpath, fbase + ".hdf")
            print(f"Converting data from {fname} to HDF...")
            load_container_from_excel(excelfile, outfile)
        print("Done.  Do not forget to commit these changes.")
        sys.exit(0)


if __name__ == "__main__":
    desc = """This script is intended for developers and scientists involved
    in the PAGER project.  It's purpose is to update the SemiEmpirical HDF files in the 
    repository based on changes to the equivalent Excel files.  Simply run this script
    from the repository directory where it is found, and it will re-create the HDF files
    from the Excel files found in the test/data directory.  Remember to run the tests, then 
    commit and merge these changes into the repository after running this script.
    """
    parser = argparse.ArgumentParser(description=desc)
    undohelp = "Undo the changes to the HDF files.  NB: Only works if changes have not been committed."
    parser.add_argument("-u", "--undo", action="store_true", help=undohelp)
    parser.add_argument(
        "-c",
        "--convert",
        action="store_true",
        help="Convert Excel spreadhsheets to HDF.",
    )
    pargs = parser.parse_args()
    if not pargs.convert and not pargs.undo:
        parser.print_help()
        sys.exit(0)
    main(pargs)
