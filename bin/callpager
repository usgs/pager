#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import sys
import io

# third party imports
from impactutils.io.cmd import get_command_output
from impactutils.comcat.query import GeoServe
from mapio.shake import getHeaderData

# local imports
from losspager.utils.config import read_config
from losspager.utils.admin import PagerAdmin

WHITELIST = ["us"]
NO_SHAKEMAPS = [
    "mb",
    "ecx",
    "tul",
    "ismp",
    "nm",
    "se",
    "ogso",
    "pr",
    "neic",
    "ld",
    "wy",
    "hv",
    "nn",
]

MAG_THRESHOLD = 4.0
ANSS_FLAG = "anss"

# what's the oldest ShakeMap we're willing to process?
THRESHOLD_YEAR = 2010

TIMEFMT = "%Y-%m-%dT%H:%M:%S"

DEBUG = True

# the PDL actions we'll actually process
ALLOWED_ACTIONS = ("EVENT_ADDED", "EVENT_UPDATED", "PRODUCT_ADDED", "PRODUCT_UPDATED")


def process_shakemap(args, config):
    if DEBUG:
        lfile = f"callpager_{args.code}.log"
        logfilename = os.path.join(config["log_folder"], lfile)
        logfile = open(logfilename, "at")
    else:
        logfile = io.StringIO()
    logfile.write(f"######Event {args.code}####\n")
    logfile.write(f"args{str(args)}\n\n")
    if args.status == "DELETE":
        # look at this with respect to archiving and sending cancel messages
        msg = "No action to take with delete messages."
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    logfile.write("Checking if status is update...\n\n")
    if args.status != "UPDATE":
        msg = f"No action to take with {args.status} messages."
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    logfile.write("Checking action...\n\n")
    if args.action not in ALLOWED_ACTIONS:
        msg = f"No action to take with {args.action} messages."
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    logfile.write("Checking source...\n\n")
    if args.source not in WHITELIST:
        fmt = "ShakeMap not from approved list of sources: %s.  Exiting."
        msg = fmt % str(WHITELIST)
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    logfile.write("Checking magnitude...\n\n")
    if args.magnitude < MAG_THRESHOLD:
        fmt = "Input ShakeMaps must be larger than M%.1f.  Exiting."
        msg = fmt % MAG_THRESHOLD
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    logfile.write("Checking ShakeMap code version...\n\n")
    code_version = args.property_shakemap_code_version
    skip_code_version = config["skip_code_version"]
    if code_version.startswith(skip_code_version):
        fmt = "Skipping events from ShakeMap code version %s:  Exiting."
        msg = fmt % code_version
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    # Use lat,lon and source to exclude ShakeMap providers who are playing
    # outside their sandbox
    # logfile.write("Checking for authoritativeness...\n\n")
    # # we'll default to letting the event run if we can't figure out
    # # who's authoritative
    # authtype = "anss"
    # authsrc = args.source.lower()
    # try:
    #     gs = GeoServe(args.lat, args.lon)
    #     authsrc, authtype = gs.getAuthoritative()
    # except Exception as e:
    #     fmt = "Can't connect to GeoServe, assuming '%s' is authoritative.\n\n"
    #     logfile.write(fmt % args.source)
    # if authtype != "anss":
    #     authsrc = "us"
    # authsrc = authsrc.lower()
    # source = args.source.lower()
    # is_authoritative = authsrc == source

    # if not is_authoritative and authsrc.lower() not in NO_SHAKEMAPS:
    #     fmt = "Source %s not authoritative for this region (%s is).  Exiting."
    #     msg = fmt % (args.source, authsrc)
    #     print(msg)
    #     logfile.write(msg + "\n\n")
    #     logfile.close()
    #     sys.exit(1)

    logfile.write("Checking gridfile...\n\n")
    gridfile = os.path.join(args.directory, "download", "grid.xml")
    if not os.path.isfile(gridfile):
        fmt = "Could not find input ShakeMap grid file at %s.  Exiting."
        msg = fmt % gridfile
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)

    # We've passed all the filters, so call PAGER
    # what directory does the pager executable live in?
    pagerpath = config["pagerpath"]
    if args.debug:
        pagerpath = os.path.join(pagerpath, "pager -d")
    else:
        pagerpath = os.path.join(pagerpath, "pager")
    cmd = f"{pagerpath} {gridfile}"
    res, stdout, stderr = get_command_output(cmd)
    if res:
        msg = f'Successful run.  Output returned: "{stdout}".'
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(0)
    else:
        fmt = 'Unsuccessful run.  Output returned: "%s", "%s".'
        msg = fmt % (stdout, stderr)
        print(msg)
        logfile.write(msg + "\n\n")
        logfile.close()
        sys.exit(1)


# TODO - Implement this for real and TEST!
# def process_admin(args, config):
#     # where is this script?
#     homedir = os.path.dirname(os.path.abspath(__file__))
#     admin_path = os.path.join(homedir, 'adminpager')
#     pager_path = os.path.join(homedir, 'adminpager')
#     pager_folder = config['output']
#     archive_folder = config['archive']
#     admin = PagerAdmin(pager_folder, archive_folder)
#     eventid = args.code
#     if args.status != 'UPDATE':
#         print('No action to take with %s messages.' % args.status)
#         sys.exit(1)
#
#     if args.action not in admin.ALLOWED_ACTIONS:
#         print('Action %s not supported.' % args.action)
#         sys.exit(1)
#
#     if args.action == 'release':
#         event_folder = admin.getEventFolder(eventid)
#         version = admin.getLastVersion(event_folder)
#         xmlfile = os.path.join(version, xmlfile)
#         if not os.path.isfile(xmlfile):
#             print('Release process failed on event %s - XML file %s does not exist.' % (eventid, xmlfile))
#             sys.exit(1)
#         pager_cmd = '%s --release %s' % (pager_path, eventid)
#         res, stdout, stderr = get_command_output(pager_cmd)
#         if not res:
#             print('Release process failed on event %s.  "%s" "%s"' % (eventid, stdout, stderr))
#             sys.exit(1)
#         print('Release of event %s successful with message "%s".' % (eventid, stdout))
#         sys.exit(0)
#
#     if args.action == 'switch-status':
#         admin_cmd1 = '%s --status check' % (admin_path)
#         res, stdout, stderr = get_command_output(admin_cmd1)
#         if not res:
#             print('Failed to get current system status.')
#             sys.exit(1)
#         if stdout.lower().find('secondary') > -1:
#             new_status = 'primary'
#         else:
#             new_status = 'secondary'
#         admin_cmd2 = '%s --status %s' % (admin_path, new_status)
#         res, stdout, stderr = get_command_output(admin_cmd2)
#         if not res:
#             print('Failure to switch system status to %s.  "%s" "%s"' % (new_status, stdout, stderr))
#             sys.exit(1)
#         print('Successfully switched system status to %s.' % (new_status))
#         sys.exit(0)
#
#     if args.action == 'cancel':
#         pager_cmd = '%s --cancel %s' % (pager_path, eventid)
#         res, stdout, stderr = get_command_output(admin_cmd2)
#         if not res:
#             print('Failure to send cancel message for event %s.  "%s" "%s"' % (eventid, stdout, stderr))
#             sys.exit(1)
#         print('Successfully sent cancel message for %s.' % (eventid))
#         sys.exit(0)
#
#     if args.action == 'renotify':
#         pass
#
#     if args.action == 'stop':
#         admin_cmd = '%s --stop %s' % (admin_path, eventid)
#         res, stdout, stderr = get_command_output(admin_cmd)
#         if not res:
#             print('Failure to stop processing for event %s.  "%s" "%s"' % (eventid, stdout, stderr))
#             sys.exit(1)
#         print('Successfully stopped processing for %s.' % (eventid))
#         sys.exit(0)
#
#     if args.action == 'unstop':
#         admin_cmd = '%s --unstop %s' % (admin_path, eventid)
#         res, stdout, stderr = get_command_output(admin_cmd)
#         if not res:
#             print('Failure to re-enable processing for event %s.  "%s" "%s"' % (eventid, stdout, stderr))
#             sys.exit(1)
#         print('Successfully re-enabled processing for %s.' % (eventid))
#         sys.exit(0)


def read_shakemap(gridfile):
    gdict, edict, gspec_dict, fdict, unc_dict = getHeaderData(gridfile)
    source = gdict["shakemap_originator"]
    lat = edict["lat"]
    lon = edict["lon"]
    magnitude = edict["magnitude"]
    time = edict["event_timestamp"]
    return (source, time, magnitude, lat, lon)


def main(args):
    logfile = os.path.join(os.path.expanduser("~"), "callpagerlog.log")
    f = open(logfile, "wt")
    f.write(f'Arguments: "{str(args)}"')
    f.close()
    config = read_config()
    if args.type == "shakemap":
        process_shakemap(args, config)
    else:
        print("No type specified, exiting.")
    sys.exit(0)


if __name__ == "__main__":
    desc = """Call the PAGER main program with arguments from PDL.
This program is meant to be called by a PDL process, and generally
not called by a user, unless that user is a developer debugging
callpager itself.
"""
    fmt_class = argparse.ArgumentDefaultsHelpFormatter
    argparser = argparse.ArgumentParser(description=desc, formatter_class=fmt_class)
    argparser.add_argument(
        "--directory",
        help="Directory where ShakeMap data can be found",
        metavar="DIRECTORY",
    )
    argparser.add_argument("--type", help="Product type", metavar="TYPE")
    argparser.add_argument("--code", help="Product code", metavar="CODE")
    argparser.add_argument("--source", help="Product source", metavar="SOURCE")
    argparser.add_argument("--status", help="Product status", metavar="STATUS")
    argparser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Run PAGER in debug mode",
    )
    argparser.add_argument("--action", help="Product action", metavar="ACTION")
    argparser.add_argument(
        "--preferred-latitude",
        type=float,
        help="Event latitude",
        metavar="LAT",
        dest="lat",
    )
    argparser.add_argument(
        "--preferred-longitude",
        type=float,
        help="Event longitude",
        metavar="LON",
        dest="lon",
    )
    argparser.add_argument(
        "--preferred-depth",
        type=float,
        help="Event depth",
        metavar="DEPTH",
        dest="depth",
    )
    argparser.add_argument(
        "--preferred-magnitude",
        type=float,
        help="Event magnitude",
        metavar="MAG",
        dest="magnitude",
    )
    argparser.add_argument(
        "--preferred-eventtime", help="Event time", metavar="TIME", dest="time"
    )
    argparser.add_argument(
        "--property-shakemap-code-version", metavar="CODE_VERSION", default="3.5"
    )
    pargs, unknown = argparser.parse_known_args()
    main(pargs)
