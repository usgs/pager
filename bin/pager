#!/usr/bin/env python

# stdlib imports
import argparse
import os.path
import sys
import textwrap

# local imports
from losspager.run.pager_main import main
from losspager.utils.config import read_config

if __name__ == "__main__":
    desc = """Run PAGER loss models and create all PAGER products.

    This program presumes that you have a configuration file in ~/.losspager/config.yml.
    
    Example usage:
    %(prog)s grid
    where grid can be either:
      - A path to a local ShakeMap grid.xml file.
      - An event ID (i.e., us2010abcd), which (on a primary system) will find the most recently PDL-downloaded grid file.
      - A url (http://earthquake.usgs.gov/realtime/product/shakemap/us10007tas/us/1484425631405/download/grid.xml)

    On either a primary or secondary system, the PAGER models will be run, and will generate maps, figures, JSON files,
    XML files, and a onePAGER PDF file in the output directory specified in the above config file.

    On primary systems that have had transfer modules configured, this output will be transferred (usually via PDL) 
    to remote systems.

    On secondary systems, the PAGER run will end with generating the content.

    To send a cancel message for an event (does nothing in laptop configuration):
    %(prog)s --cancel eventid
    """
    parser = argparse.ArgumentParser(
        description=desc, formatter_class=argparse.RawTextHelpFormatter
    )
    gridhelp = """gridfile can be either:
      - A path to a local ShakeMap grid.xml file.
      - An event ID (i.e., us2010abcd), which (on a primary system) will find the most recently PDL-downloaded grid file.
      - A url (http://earthquake.usgs.gov/realtime/product/shakemap/us10007tas/us/1484425631405/download/grid.xml)
    """
    parser.add_argument("gridfile", help=textwrap.dedent(gridhelp))
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        default=False,
        help="Print debug information (mostly useful to developers)",
    )
    parser.add_argument(
        "--release",
        action="store_true",
        default=False,
        help="Set release status to True (override other criteria)",
    )
    parser.add_argument(
        "--cancel",
        action="store_true",
        default=False,
        help="Send a cancel message using any configured transfer methods",
    )
    parser.add_argument(
        "--tsunami",
        choices=["on", "off", "auto"],
        default="auto",
        help="Set tsunami flag to True/False (override other criteria), or use default criteria",
    )
    parser.add_argument(
        "--elapsed",
        type=int,
        metavar="ELAPSED",
        help="Override calculated elapsed time with minutes.  Usually used for scenarios.",
    )
    parser.add_argument(
        "--logfile",
        type=str,
        metavar="LOGFILE",
        help="Send output to custom log file location.",
    )
    args = parser.parse_args()

    # read in the config - should be in a predictable place - this will error out if not.
    config = read_config()

    # Make sure model_data section exists
    try:
        config["model_data"]["population_data"][0]["population_year"]
        config["model_data"]["population_data"][0]["population_grid"]
        os.path.isfile(config["model_data"]["country_grid"])
        os.path.isfile(config["model_data"]["urban_rural_grid"])
    except Exception:
        errmsg = "Config file %s is missing some or all of the required information.  See the help for the required format.\n"
        sys.stderr.write(errmsg)
        sys.exit(1)

    result, msg = main(args, config)
    print(msg)
    if result:
        sys.exit(0)
    sys.exit(1)
